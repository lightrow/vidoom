class Tachometer : EventHandler 
{	

	bool hasMachreaper;
	int ammo;
	int speed;
	
	void doStuff() {
		let player = players[consoleplayer];
		let mo = player.mo;
		hasMachreaper = mo.CheckInventory("Machreaper", 1);
		int newSpeed = sqrt(mo.vel.x * mo.vel.x + mo.vel.y * mo.vel.y + mo.vel.z * mo.vel.z);
		if (newSpeed != speed) {
			speed += (newSpeed - speed) / 2;
		}
		ammo = mo.CountInv("SonicAmmo");
	}
	
	// PLAY scope : collect data
	override void WorldTick() {	
		doStuff();
		Super.WorldTick();
	}

	// UI Scope: you cannot alter data here
	override void renderOverlay(RenderEvent e) {	
		if (!hasMachreaper) {
			return;
		}
		int width = Screen.GetWidth();
		int height = Screen.GetHeight();
		int viewportWidth = 320;
		int viewportHeight = 200;
		
		int offsetX = -viewportWidth/4;
		
		int tachoWidth = 40;
		int tachoHeight = 17;
		
		int tachoArrowWidth = 14;
		int tachoArrowHeight = 1;
		
		int x1 = viewportWidth/2 + offsetX;
		int y1 = viewportHeight;
		
		string image;
		image.appendFormat("%s%d", "ispeed", ammo);
		
		TextureID tacho = TexMan.CheckForTexture (image, TexMan.Type_Any);
		TextureID arrow = TexMan.CheckForTexture ("tacharr", TexMan.Type_Any);
		
		Screen.DrawTexture(tacho, false, x1 - tachoWidth/2, y1 - tachoHeight,
			DTA_KeepRatio, true, DTA_VirtualWidth, viewportWidth, DTA_VirtualHeight, viewportHeight);
				
	

		double speedDegrees = 180 - speed * 8;
		if (speedDegrees < 10) {
			speedDegrees = 10;
		}
		

		Screen.DrawTexture(arrow, false, x1 - 3, y1 - tachoArrowHeight,
			DTA_KeepRatio, true, DTA_VirtualWidth, viewportWidth, DTA_VirtualHeight, viewportHeight, DTA_Rotate, speedDegrees, DTA_Alpha, 0.7);

	}
}

class PistolStartHandler : EventHandler
 {
	
   override void PlayerEntered (PlayerEvent e)
   {
		PlayerInfo player = players[e.PlayerNumber];
		int IntroChance;
		player.mo.a_setblend("000000",1.00,70,"000000",0.0);
		// LocalAmbientSound("level/intro",127);
		
		// CRINGE YIKES SMH FAM
		//IntroChance = random(0,3);
		//if (IntroChance == 3) { player.mo.a_playsound("player/greet",2); }

		if (G_SkillPropertyInt(SKILLP_ACSReturn) == 666 || CVar.GetCvar("vi_pistolstart").getBool()) {
			player.mo.ClearInventory();
			player.mo.A_TakeInventory("Machreaper");
			PlayerPawn(player.mo).ACS_NamedExecute("ResetHealth");
			player.mo.GiveInventory("Rage", 1);
			player.mo.GiveInventory("FireAxe", 1);
			player.mo.GiveInventory("Clip", 35);
			player.mo.GiveInventory("PistolLoad", 10);
			player.mo.GiveInventory("Handcannon", 1);
			player.mo.GiveInventory("Nade", 1);
			Player.mo.GiveInventory("NadeAmmo", 2);
	}
		
   }
 }
 
 
class GibHandler: EventHandler {
	override void WorldThingSpawned(WorldEvent e) {
		if (!CVar.getCvar("vi_gore").getBool()) {
			return;
		};

		if (!e.Thing) {
			return;
		}

		if (!e.Thing.bIsMonster) {
			return;
		}

		if (e.Thing is "LostSoul") {
			return;
		}

		e.Thing.A_GiveInventory("GibChecker", 1);		
	}
}

class GibChecker: Inventory 
{
	bool didGib;
	int gibHealthThreshold;

	override void BeginPlay() {
		gibHealthThreshold = -35;
	}

	override void Tick() {
		if (!Owner || didGib || !gibHealthThreshold) {
			return;
		}

		bool isGibbyMonster = Owner is "PainElemental" || Owner is "CyberDemon";
		bool isInXDeathState = Owner.FindState('XDeath', true) != NULL && Owner.InStateSequence(Owner.CurState, Owner.ResolveState('XDeath'));
		bool isGibbed = isInXDeathState || Owner.Health < gibHealthThreshold || (Owner.Health <= 0 && isGibbyMonster);

		if (!didGib && isGibbed) {
			Owner.bSpriteFlip = RandomPick(false, true);

			didGib = true;

			// force XDeath state (is there a way to just override Owner.GibHealth?)
			if (!isInXDeathState && Owner.FindState('XDeath', true) != NULL) {
				Owner.setstatelabel("XDeath");
			}

			if (Owner is "Cacodemon") {
				Owner.A_SpawnItemEx("BlueGoreController",0,0,0,Owner.VelX,Owner.VelY,Owner.VelZ,Owner.Angle,SXF_ABSOLUTEANGLE|SXF_ABSOLUTEPOSITION|SXF_ABSOLUTEVELOCITY);
			} else if (Owner is "HellKnight" || Owner is "BaronOfHell") {
				Owner.A_SpawnItemEx("GreenGoreController",0,0,0,Owner.VelX,Owner.VelY,Owner.VelZ,Owner.Angle,SXF_ABSOLUTEANGLE|SXF_ABSOLUTEPOSITION|SXF_ABSOLUTEVELOCITY);
			} else if (isGibbyMonster) {
				Owner.A_SpawnItemEx("PainElementalGoreController",0,0,0,Owner.VelX,Owner.VelY,Owner.VelZ,Owner.Angle,SXF_ABSOLUTEANGLE|SXF_ABSOLUTEPOSITION|SXF_ABSOLUTEVELOCITY);
			} else if (Owner.Mass > 100) {
				Owner.A_SpawnItemEx("BigGoreController",0,0,0,Owner.VelX,Owner.VelY,Owner.VelZ,Owner.Angle,SXF_ABSOLUTEANGLE|SXF_ABSOLUTEPOSITION|SXF_ABSOLUTEVELOCITY);
			} else  {
				Owner.A_SpawnItemEx("GoreController",0,0,0,Owner.VelX,Owner.VelY,Owner.VelZ,Owner.Angle,SXF_ABSOLUTEANGLE|SXF_ABSOLUTEPOSITION|SXF_ABSOLUTEVELOCITY);
			}

			return;
		}
	}
}
