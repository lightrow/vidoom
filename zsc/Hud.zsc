class WeaponIcon
{
	string _tex;
	bool _active;
	bool _selectable;
	string _ammo;

	
	void setIcon(string tex, bool active, bool selectable, string ammoType){
		_tex = tex;
		_active = active;
		_selectable = selectable;
		_ammo = ammoType;
	}	
}

Class VoyageHUD : BaseStatusBar {
	HUDFont MainFont;
	HUDFont SubFont;
	InventoryBarState diparms;
	Array<Ammo> ownedAmmo;
	int curAmmoIndex;
	Vector2 BaseSize;
	bool centered;
	
	Array<WeaponIcon> toDraw;
	
	static const String weapons[] = {
//		"Machreaper",
		"Nade",
		"FireAxe",
		"HandCannon",
		"Spas",
		"DoubleRifle",
		"Minimi",
		"Bazooka",
		"PlasmaCannon",
		"PlasmaHowitzer"
	};
	
	static const String ammos[] = {
//		"SonicAmmo",
		"NadeAmmo",
		"Rage",
		"Clip",
		"Shell",
		"Shell",
		"Clip",
		"RocketAmmo",
		"Cell",
		"Cell"
	};
	
	static const String weaponIcons[] = {
// 		"imach",
 		"inade",
		"iaxe",
		"ijeri",
		"ispas",
		"icolt",
		"imini",
		"ibazoo",
		"iplasma",
		"ibfg"
	};
	
	//unused
	static const int weaponIconsWidths[] = {
		14,
		16,
		30,
		26,
		21,
		26,
		25,
		25
	};
	
	// Major Cooke
	void DrawStringScaled(HUDFont font, String string, Vector2 pos, int flags = 0, int translation = Font.CR_UNTRANSLATED, double Alpha = 1., int wrapwidth = -1, int linespacing = 4, double scaling = 1.0)
	{
		Vector2 OldScale = BaseSize, TempScale = BaseSize;
		Vector2 ScaledPos = pos;
		
		if (scaling == 0.0) //Why draw anything? Also to prevent division by 0.
			return;
		
		scaling = abs(scaling);
		
		// Thankfully, scaling up is directly that -- smaller screen coordinates and 
		// larger texture size which is automatically handled by the engine.
		bool sized = (scaling != 1.0);
		if (sized)
		{
			TempScale /= scaling;
			ScaledPos /= scaling;
		}
				
		// Change to the new scale, draw it, and then set it back.
		if (sized) SetSize(0, TempScale.X, TempScale.Y);
		DrawString(font, string, ScaledPos, flags, translation, Alpha, wrapwidth, linespacing);
		if (sized) SetSize(0, OldScale.X, OldScale.Y);
		
	} 


	override void Init() {	
		Super.Init();
		// this has to be done, even if the HUD is fullscreen, it prevents a crash
		BaseSize = (320, 200);
		SetSize(0, BaseSize.x, BaseSize.y,BaseSize.x,BaseSize.y);
		
		// Create the font used for the fullscreen HUD
		Font fnt = "EVILBIG";
		MainFont = HUDFont.Create(fnt);
		fnt = "VI_FONT2";
		// the small font is monospace because it helps with centering and positioning
		SubFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true);
		diparms = InventoryBarState.Create(null, Font.CR_UNTRANSLATED, 1, "ITEMBOX");
	}
	
	override void DrawAutomapHUD(double ticFrac) {
		// This uses the normal automap HUD but just changes the highlight color.
		DoDrawAutomapHUD(Font.CR_GREY, Font.CR_UNTRANSLATED);
	}
	
	override void Draw (int state, double TicFrac) {
		Super.Draw(state, TicFrac);
		BeginHUD();
		DrawFullScreenStuff(TicFrac);
	}
	
	void handleWeaponsBar() {

		Array<WeaponIcon> toDrawNew;
	
		for (int i=0; i < weapons.size(); i++){
			if (CPlayer.mo.findInventory(weapons[i])){
				WeaponIcon newIcon = new("WeaponIcon");
				bool gotAmmo = false;
				int ammoLeft = 0;
				switch(i){
					case 1:
						ammoLeft = GetAmount("Rage");
						// always selectable, don't dim the icon
						gotAmmo = true;
						break;
					case 2:
						ammoLeft = Max(GetAmount("PistolLoad"),GetAmount("Clip"));
						if (ammoLeft){
							gotAmmo = true;
						}
						break;
					case 3:
						ammoLeft = Max(GetAmount("LoadedShell"),GetAmount("Shell"));
						if (ammoLeft){
							gotAmmo = true;
						}
						break;
					case 4:
						ammoLeft = GetAmount("Shell");
						if (ammoLeft >= 2){
							gotAmmo = true;
						}
						break;
					case 6:
						ammoLeft = GetAmount("Cell");
						if (ammoLeft >= 10){
							gotAmmo = true;
						}
						break;
					case 8:
						ammoLeft = GetAmount("Cell");
						if (ammoLeft >= 40){
							gotAmmo = true;
						}
						break;
					default:
						ammoLeft = GetAmount(ammos[i]);
						if (ammoLeft){
							gotAmmo = true;
						}
						break;
				}
				newIcon.setIcon(weaponIcons[i],CPlayer.readyweapon && CPlayer.readyweapon.getClass() == weapons[i], gotAmmo, ammos[i]);
				toDrawNew.push(newIcon);
			}
		}
		
		if (toDrawNew.Size() > 0){
			int totalWidth = 0;
			int totalHeight = 0;
			int currentWidth = 0;
			int currentHeight = 0;
			
			string back;
			string icon;
			
			int width = 480;
			int height = 200;
			double center = 160;

			int iconWidth = 23;
			int iconHeight = 17;

			int yOffset = -iconHeight - 5;
			int xOffset = -iconWidth - 5;
			int distance = 3;
			
			for (int i = 0; i < toDrawNew.Size(); i++) {
				totalWidth+=distance+iconwidth;
				totalheight+=15;
			}
			
			double x = width - totalWidth;

			for (int i = toDrawNew.Size() -1; i >= 0; i--) {
				icon = toDrawNew[i]._tex;
	
				if (icon=="imach" && GetAmount("SonicAmmo")>0) {
					back = "ibackia";
				} else if (toDrawNew[i]._active) {
					back = "ibacka";
				} else {
					back = "ibacki";
				}
				if (toDrawNew[i]._selectable){
					if (toDrawNew[i]._active){
						DrawImage(back, (xOffset - currentWidth, yOffset), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
						DrawImage(icon, (xOffset - currentWidth+1, yOffset+2), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
					} else {
						DrawImage(back, (xOffset - currentWidth, yOffset), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 0.6);
						DrawImage(icon, (xOffset - currentWidth+1, yOffset+2), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 0.6);
					}
				} else {
					DrawImage(back,(xOffset - currentWidth, yOffset), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 0.2);
					DrawImage(icon,(xOffset - currentWidth+1, yOffset+2), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 0.2);
				}
				
				double amt, maxamt;
				[amt, maxamt] = GetAmount(toDrawNew[i]._ammo);
				double ratio = amt / maxamt;
				double barHeight = Max(Round(15 * ratio),amt>0?1:0);
				int alpha;
				Color barColor;
				if (toDrawNew[i]._active){
					alpha = 255;
				} else {
					alpha = 170;
				}
				if (barHeight > 10 || icon == "imach"){
					barColor = Color(alpha, 0, 150, 70);
				} else if (barHeight < 5) {
					barColor = Color(alpha, 200, 20, 20);
				} else {
					barColor = Color(alpha, 200, 180, 10);
				}
				Fill(barColor, xOffset - currentWidth+iconwidth -3, yOffset+1+15-barHeight, 2, barHeight, DI_ITEM_LEFT_BOTTOM|DI_SCREEN_RIGHT_BOTTOM);

				currentWidth += iconwidth + distance;	
			}
		}

	}
	
	void handleMachreaperBar() {


	}
	
	int getColorGrading(int amount, int redamount, int greenamount) {
		if (amount>greenamount){
			return Font.CR_WHITE;
		}
		if (amount<redamount) {
			return Font.CR_DARKRED;
		}
		return Font.CR_WHITE;
	}
	
	string getAmmoIcon(string ammoname){
		if (ammoname=="NadeAmmo"){
			return "ibomb";
		}
		if (ammoname=="Clip"){
			return "ibull";
		}
		if (ammoname=="Shell"){
			return "ishell";
		}
		if (ammoname=="Cell"){
			return "icell";
		}
		if (ammoname=="SonicAmmo"){
			return "isonic";
		}
		if (ammoname=="RocketAmmo"){
			return "irock";
		}
		if (ammoname=="rage") {
			//WHY DOES THIS HAVE TO BE LOWERCASE TO WORK REEEEEE
			return "irage";
		}
		return "";
	}
	
	void DrawFullScreenStuff(double TicFrac) {
		if (CPlayer && !automapactive) {
			// flags used for positioning text
			int tAlignLeft = DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM;
			int tAlignRight = DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM;
			
			
			// ammo
			Inventory a1, a2;
			[a1, a2] = GetCurrentAmmo();
			Cvar oldHud = Cvar.GetCVar("vi_oldhud");
			if (oldHud.getBool()){
				if (a1 && a2 == NULL) {
					DrawStringScaled(MainFont, FormatNumber(a1.amount, 0, 6), (-23, -42), tAlignRight,GetColorGrading(a1.amount,25,60),1,-1,4,0.75);
					DrawImage(getAmmoIcon(a1.getClassName()),(-20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
				}
				if (a2 && a1 == NULL) {
					DrawStringScaled(MainFont, FormatNumber(a2.amount, 0, 6), (-23, -42), tAlignRight,GetColorGrading(a2.amount,25,60),1,-1,4,0.75);
					DrawImage(getAmmoIcon(a2.getClassName()),(-20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
				}
				else if (a1 && a2) {
					DrawStringScaled(MainFont, FormatNumber(a2.amount, 0, 6), (-23, -42), tAlignRight,GetColorGrading(a2.amount,25,60),1,-1,4,0.75);
					DrawStringScaled(MainFont, FormatNumber(a1.amount, 0, 6), (-59, -51), tAlignRight,Font.CR_DARKRED,1,-1,4,1.3);
					DrawImage(getAmmoIcon(a2.getClassName()),(-20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
				}
				
				// health
				DrawStringScaled(MainFont, FormatNumber(CPlayer.health, 0, 9), (40, -42), tAlignLeft, getColorGrading(CPlayer.health,30,70),1,-1,4,0.75);
				DrawImage("iheart",(20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_LEFT_BOTTOM, 1);
				
				// armor
				DrawStringScaled(MainFont, FormatNumber(GetArmorAmount(), 0, 9), (40, -25), tAlignLeft, getColorGrading(GetArmorAmount(),50,100),1,-1,4,0.75);
				DrawImage("ishield",(20,-25), DI_ITEM_LEFT_TOP|DI_SCREEN_LEFT_BOTTOM, 1);

			} else {
				
				if (a1 && a2 == NULL) {
					DrawString(MainFont, FormatNumber(a1.amount, 0, 6), (-23, -44), tAlignRight,GetColorGrading(a1.amount,25,60),1,-1,4);
					DrawImage(getAmmoIcon(a1.getClassName()),(-20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
				}
				if (a2 && a1 == NULL) {
					DrawString(MainFont, FormatNumber(a2.amount, 0, 6), (-23, -44), tAlignRight,GetColorGrading(a2.amount,25,60),1,-1,4);
					DrawImage(getAmmoIcon(a2.getClassName()),(-20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
				}
				else if (a1 && a2) {
					DrawString(MainFont, FormatNumber(a2.amount, 0, 6), (-23, -44), tAlignRight,GetColorGrading(a2.amount,25,60),1,-1,4);
					DrawStringScaled(MainFont, FormatNumber(a1.amount, 0, 6), (-54, -49), tAlignRight,Font.CR_BLACK,1,-1,4,1);
					DrawStringScaled(MainFont, FormatNumber(a1.amount, 0, 6), (-55, -50), tAlignRight,Font.CR_DARKRED,1,-1,4,1);
					DrawImage(getAmmoIcon(a2.getClassName()),(-20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_RIGHT_BOTTOM, 1);
				}	
				
				// health
				DrawString(MainFont, FormatNumber(CPlayer.health, 0, 9), (40, -44), tAlignLeft, getColorGrading(CPlayer.health,30,70),1,-1,4);
				DrawImage("iheart",(20,-42), DI_ITEM_LEFT_TOP|DI_SCREEN_LEFT_BOTTOM, 1);
				
				// armor
				DrawString(MainFont, FormatNumber(GetArmorAmount(), 0, 9), (40, -27), tAlignLeft, getColorGrading(GetArmorAmount(),50,100),1,-1,4);
				DrawImage("ishield",(20,-25), DI_ITEM_LEFT_TOP|DI_SCREEN_LEFT_BOTTOM, 1);
			}
			// weapons
			handleWeaponsBar();
			
			// machreaper bar
			handleMachreaperBar();
			
			// keys			
			// this is basically just gzdoom.pk3 code, but i changed the flags, offsets and scale a bit
			// goes through the keys list and just draws whatever is appropriate
			bool locks[6];
			String image;
			for (int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
			// key 1
			if (locks[1] && locks[4]) image = "STKEYS6";
			else if (locks[1]) image = "STKEYS0";
			else if (locks[4]) image = "STKEYS3";
			DrawImage(image, (28, -50), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, 1, (-1, -1), (1, 1));
			// key 2
			if (locks[2] && locks[5]) image = "STKEYS7";
			else if (locks[2]) image = "STKEYS1";
			else if (locks[5]) image = "STKEYS4";
			else image = "";
			DrawImage(image, (43, -50), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, 1, (-1, -1), (1, 1));
			// key 3
			if (locks[0] && locks[3]) image = "STKEYS8";
			else if (locks[0]) image = "STKEYS2";
			else if (locks[3]) image = "STKEYS5";
			else image = "";
			DrawImage(image, (58, -50), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, 1, (-1, -1), (1, 1));
			
			int invY = -96;

		}
	}
}
